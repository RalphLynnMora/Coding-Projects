# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LsKG8nKPZwVoAoGhHgNFCdiaWyMpgmf2
"""

from numpy import exp, array, random, dot
import random
lr = 1 #learning rate
bias = 1 #value of bias
print(random.randrange(0, 2))
x = [1*random.randrange(0, 2),2*random.randrange(0, 2),4*random.randrange(0, 2),8*random.randrange(0, 2),16*random.randrange(0, 2)];
number = x[0]+x[1]+x[2]
print(x)

#w = [random.random(),random.random(),random.random(),random.random()] #weights
print(x[1])

SUM = x[0]*w[0]+x[1]*w[1]+x[2]*w[2]+bias*w[3]

print(SUM)

if SUM > 0 : #activation function (here Heaviside)
      outputP = 1
else :
      outputP = 0
output = (x[0]+x[1]+x[2])%2
print(outputP)
error = output - outputP
w[0] += error * x[0] * lr
w[1] += error * x[1] * lr
w[2] += error * x[2] * lr

#for x in range(100):
  #print(random.randrange(0, 2))

w = [0]*11
for a in range (10):
  w[a] = random.random()

for x in range(100):
  binary = [0] * 10
  total = 0
  rep = [0] * 10

  for i in range(10):
    binary[i]= random.randrange(0, 2)
    rep[i] = 2**(i)*binary[i]
    total += rep[i]


  if total % 2 == 0:
    output = 1
  else:
    output = 0



#print(binary)
#print(rep)
  print(total)
#print(w)


  #outputP = rep[0]*w[0]+rep[1]*w[1]+rep[2]*w[2]+rep[3]*w[3]+rep[4]*w[4]+rep[5]*w[5]+rep[6]*w[6]+rep[7]*w[7]+rep[8]*w[8]+rep[9]*w[9]+bias*w[10]
  outputP = binary[0]*w[0]+binary[1]*w[1]+binary[2]*w[2]+binary[3]*w[3]+binary[4]*w[4]+binary[5]*w[5]+binary[6]*w[6]+binary[7]*w[7]+binary[8]*w[8]+binary[9]*w[9]+bias*w[10]
  if outputP > 0 : #activation function (here Heaviside)
    outputP = 1
  else :
    outputP = 0

  #print(outputP)
  error = output - outputP
  w[0] += error * binary[0] * lr
  w[1] += error * binary[1] * lr
  w[2] += error * binary[2] * lr
  w[3] += error * binary[3] * lr
  w[4] += error * binary[4] * lr
  w[5] += error * binary[5] * lr
  w[6] += error * binary[6] * lr
  w[7] += error * binary[7] * lr
  w[8] += error * binary[8] * lr
  w[9] += error * binary[9] * lr
  w[10] += error * bias * lr
  print(output)
  print(outputP)
  if output == outputP:
    print('correct')
    print()
  else:
    print('wrong')
    print()
print(w)

w = [0]*11
for a in range (10):
  w[a] = random.random()

for x in range(100):
  binary = [0] * 10
  total = 0
  rep = [0] * 10

  for i in range(10):
    binary[i]= random.randrange(0, 2)
    rep[i] = 2**(i)*binary[i]
    total += rep[i]


  if total % 2 == 0:
    output = 0
  else:
    output = 1



#print(binary)
#print(rep)
  print(total)
#print(w)


  #outputP = rep[0]*w[0]+rep[1]*w[1]+rep[2]*w[2]+rep[3]*w[3]+rep[4]*w[4]+rep[5]*w[5]+rep[6]*w[6]+rep[7]*w[7]+rep[8]*w[8]+rep[9]*w[9]+bias*w[10]
  outputP = binary[0]*w[0]+binary[1]*w[1]+binary[2]*w[2]+binary[3]*w[3]+binary[4]*w[4]+binary[5]*w[5]+binary[6]*w[6]+binary[7]*w[7]+binary[8]*w[8]+binary[9]*w[9]+bias*w[10]
  if outputP < 0 : #activation function (here Heaviside)
    outputP = 0
  else :
    outputP = 1

  #print(outputP)
  error = output - outputP
  w[0] += error * binary[0] * lr
  w[1] += error * binary[1] * lr
  w[2] += error * binary[2] * lr
  w[3] += error * binary[3] * lr
  w[4] += error * binary[4] * lr
  w[5] += error * binary[5] * lr
  w[6] += error * binary[6] * lr
  w[7] += error * binary[7] * lr
  w[8] += error * binary[8] * lr
  w[9] += error * binary[9] * lr
  w[10] += error * bias * lr
  print(output)
  print(outputP)
  if output == outputP:
    print('correct')
    print()
  else:
    print('wrong')
    print()
print(w)
